<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Application Container on Software Craftsman</title>
    <link>https://jfeng45.github.io/tags/application-container/</link>
    <description>Recent content in Application Container on Software Craftsman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jfeng45.github.io/tags/application-container/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Microservice with Clean Architecture: Application Container</title>
      <link>https://jfeng45.github.io/posts/application_container/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jfeng45.github.io/posts/application_container/</guid>
      <description>One philosophy of Clean Architecture is to isolate framework for the application, so the framework won’t take over your application and you decide when and where to use them. In this application, I purposely not using any libraries at the beginning so I can have a better control on the project structure. Only after the whole application structure is laid out, I will consider replacing some components of the application with libraries.</description>
    </item>
    
    <item>
      <title>Go Microservice with Clean Architecture: Dependency Injection</title>
      <link>https://jfeng45.github.io/posts/dependency_injection/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jfeng45.github.io/posts/dependency_injection/</guid>
      <description>In Clean Architecture, each layer of the application ( use case, data service and domain model) only depends on interface of other layers instead of concrete types. At run-time, the the application container¹ is responsible for creating concrete types and inject them into each function, the technology it used is called Dependency Injection². The following is the requirements.
Requirements for dependency relationship on container:
 The container package is the only package that depends on concrete types and many outside libraries because it needs to create concrete types.</description>
    </item>
    
  </channel>
</rss>