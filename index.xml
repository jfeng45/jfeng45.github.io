<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Craftsman</title>
    <link>https://jfeng45.github.io/</link>
    <description>Recent content on Software Craftsman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jfeng45.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Microservice with Clean Architecture: Application Logging</title>
      <link>https://jfeng45.github.io/posts/go_logging_and_error_handling/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jfeng45.github.io/posts/go_logging_and_error_handling/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go Microservice with Clean Architecture: Application Layout</title>
      <link>https://jfeng45.github.io/posts/go_microservice_application_layout/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jfeng45.github.io/posts/go_microservice_application_layout/</guid>
      <description>I created a Microservice with Go and gRPC and tried to figure out what is the best project layout, which can be used as a template for my future projects. I came from Java background and found myself keeping struggling between Java and Go idioms, which are quite different. I wrote a series of articles about decisions and trade-offs I made when working on the project. This is the first one, which is about project structure.</description>
    </item>
    
    <item>
      <title>Go Microservice Template Project with Clean Architecture</title>
      <link>https://jfeng45.github.io/project/go-microservice-template/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jfeng45.github.io/project/go-microservice-template/</guid>
      <description>A project to show the application layout for a Microservice application in gRPC and Go. It applied Clean Architecture design and used dependency injection to inject concrete types into each function.</description>
    </item>
    
    <item>
      <title>Go gRPC Project</title>
      <link>https://jfeng45.github.io/project/go-grpc/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jfeng45.github.io/project/go-grpc/</guid>
      <description>A project to learn writing Microservice in GRPC and Go, and it is not intended for production use. I originally took the code form Alan Shreve&amp;rsquo;s gRPC cache service and made some changes on retry and timeout features.</description>
    </item>
    
  </channel>
</rss>