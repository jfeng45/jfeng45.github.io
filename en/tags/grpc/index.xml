<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grpc on </title>
    <link>https://jfeng45.github.io/en/tags/grpc/</link>
    <description>Recent content in Grpc on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 22 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jfeng45.github.io/en/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Microservice with Clean Architecture</title>
      <link>https://jfeng45.github.io/en/posts/clean_architecture_with_go/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jfeng45.github.io/en/posts/clean_architecture_with_go/</guid>
      <description>I created a Microservice project with Go and gRPC and tried to figure out what is the best project layout, which can be used as a template for my future projects. I also tried to apply the best practice in application design and programming, such as Clean Architecture, Dependency Injection, logging, error handling and so on, to the Go Microservice application. I came from Java background and found myself keeping struggling between Java and Go idioms, which are quite different.</description>
    </item>
    
    <item>
      <title>Go Microservice with Clean Architecture: Application Design</title>
      <link>https://jfeng45.github.io/en/posts/clean_architecture_application_design/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jfeng45.github.io/en/posts/clean_architecture_application_design/</guid>
      <description>I created a Microservice with Go and gRPC and tried to apply best practice of application design and programming to this project. I wrote a series of articles about decisions and trade-offs I made when working on the project. This one is about application design.
The design of the application followed Clean Architecture¹. There are three layers in business logic code: use case, domain model and data service.
There are three top level packages “usecase”, “model” and “dataservice”, and one for each layer.</description>
    </item>
    
    <item>
      <title>Go Microservice with Clean Architecture: Application Layout</title>
      <link>https://jfeng45.github.io/en/posts/go_microservice_application_layout/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jfeng45.github.io/en/posts/go_microservice_application_layout/</guid>
      <description>I created a Microservice with Go and gRPC and tried to figure out what is the best project layout, which can be used as a template for my future projects. I came from Java background and found myself keeping struggling between Java and Go idioms, which are quite different. I wrote a series of articles about decisions and trade-offs I made when working on the project. This is the first one, which is about project structure.</description>
    </item>
    
  </channel>
</rss>